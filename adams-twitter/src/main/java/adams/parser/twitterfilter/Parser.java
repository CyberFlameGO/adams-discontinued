
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package adams.parser.twitterfilter;

import adams.core.net.TwitterHelper;
import adams.data.twitter.TwitterField;
import adams.parser.ParserHelper;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.SymbolFactory;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Iterator;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\012\000" +
    "\002\005\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\056\005\020\012\027\013\016\014\035\015" +
    "\036\016\006\017\034\020\017\021\021\022\015\023\012" +
    "\024\030\025\032\026\013\027\007\030\010\031\025\032" +
    "\004\033\011\034\014\045\022\047\024\001\002\000\004" +
    "\005\211\001\002\000\060\002\ufffe\005\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\045\ufffe\047\ufffe" +
    "\001\002\000\010\007\205\010\203\011\204\001\002\000" +
    "\072\002\ufff5\004\ufff5\005\ufff5\006\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\045\ufff5\047\ufff5\001\002\000\072\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\045\ufff4\047\ufff4" +
    "\001\002\000\004\005\166\001\002\000\106\002\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8" +
    "\001\002\000\010\007\161\010\160\011\162\001\002\000" +
    "\056\005\074\012\027\013\016\014\035\015\036\016\006" +
    "\017\034\020\017\021\021\022\015\023\012\024\030\025" +
    "\032\026\013\027\007\030\010\031\025\032\004\033\011" +
    "\034\014\045\022\047\024\001\002\000\106\002\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9" +
    "\001\002\000\010\007\153\010\151\011\152\001\002\000" +
    "\010\007\145\010\143\011\144\001\002\000\056\005\020" +
    "\012\027\013\016\014\035\015\036\016\006\017\034\020" +
    "\017\021\021\022\015\023\012\024\030\025\032\026\013" +
    "\027\007\030\010\031\025\032\004\033\011\034\014\045" +
    "\022\047\024\001\002\000\010\007\134\010\132\011\133" +
    "\001\002\000\072\002\ufffb\004\ufffb\005\ufffb\006\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\045\ufffb\047\ufffb\001\002\000\060\002" +
    "\uffff\005\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\045\uffff\047\uffff\001\002\000\106\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\010\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca" +
    "\001\002\000\106\002\uffc7\004\uffc7\005\uffc7\006\uffc7\010" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\047\uffc7\001\002\000\016\010\120" +
    "\040\116\041\121\042\123\043\117\044\122\001\002\000" +
    "\010\007\111\010\110\011\112\001\002\000\010\007\104" +
    "\010\102\011\103\001\002\000\066\002\ufffc\005\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\071" +
    "\036\073\037\072\045\ufffc\047\ufffc\001\002\000\010\007" +
    "\064\010\063\011\065\001\002\000\060\002\062\005\020" +
    "\012\027\013\016\014\035\015\036\016\006\017\034\020" +
    "\017\021\021\022\015\023\012\024\030\025\032\026\013" +
    "\027\007\030\010\031\025\032\004\033\011\034\014\045" +
    "\022\047\024\001\002\000\010\007\055\010\053\011\054" +
    "\001\002\000\010\007\047\010\045\011\046\001\002\000" +
    "\010\007\041\010\037\011\040\001\002\000\004\046\044" +
    "\001\002\000\004\046\043\001\002\000\004\046\042\001" +
    "\002\000\072\002\uffea\004\uffea\005\uffea\006\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\045\uffea\047\uffea\001\002\000\072\002\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\045\uffe8" +
    "\047\uffe8\001\002\000\072\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\045\uffe9\047\uffe9\001\002\000" +
    "\004\046\052\001\002\000\004\046\051\001\002\000\004" +
    "\046\050\001\002\000\072\002\uffed\004\uffed\005\uffed\006" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\045\uffed\047\uffed\001\002\000" +
    "\072\002\uffeb\004\uffeb\005\uffeb\006\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\045\uffeb\047\uffeb\001\002\000\072\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\045\uffec\047\uffec" +
    "\001\002\000\004\046\060\001\002\000\004\046\057\001" +
    "\002\000\004\046\056\001\002\000\072\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\045\uffe4\047\uffe4" +
    "\001\002\000\072\002\uffe2\004\uffe2\005\uffe2\006\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\045\uffe2\047\uffe2\001\002\000\072\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\045" +
    "\uffe3\047\uffe3\001\002\000\060\002\001\005\001\012\001" +
    "\013\001\014\001\015\001\016\001\017\001\020\001\021" +
    "\001\022\001\023\001\024\001\025\001\026\001\027\001" +
    "\030\001\031\001\032\001\033\001\034\001\045\001\047" +
    "\001\001\002\000\004\002\000\001\002\000\004\046\070" +
    "\001\002\000\004\046\067\001\002\000\004\046\066\001" +
    "\002\000\072\002\uffd6\004\uffd6\005\uffd6\006\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\045\uffd6\047\uffd6\001\002\000\072\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\045\uffd8" +
    "\047\uffd8\001\002\000\072\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\045\uffd7\047\uffd7\001\002\000" +
    "\056\005\074\012\027\013\016\014\035\015\036\016\006" +
    "\017\034\020\017\021\021\022\015\023\012\024\030\025" +
    "\032\026\013\027\007\030\010\031\025\032\004\033\011" +
    "\034\014\045\022\047\024\001\002\000\056\005\074\012" +
    "\027\013\016\014\035\015\036\016\006\017\034\020\017" +
    "\021\021\022\015\023\012\024\030\025\032\026\013\027" +
    "\007\030\010\031\025\032\004\033\011\034\014\045\022" +
    "\047\024\001\002\000\056\005\074\012\027\013\016\014" +
    "\035\015\036\016\006\017\034\020\017\021\021\022\015" +
    "\023\012\024\030\025\032\026\013\027\007\030\010\031" +
    "\025\032\004\033\011\034\014\045\022\047\024\001\002" +
    "\000\056\005\074\012\027\013\016\014\035\015\036\016" +
    "\006\017\034\020\017\021\021\022\015\023\012\024\030" +
    "\025\032\026\013\027\007\030\010\031\025\032\004\033" +
    "\011\034\014\045\022\047\024\001\002\000\072\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\045\ufff7" +
    "\047\ufff7\001\002\000\012\006\077\035\071\036\073\037" +
    "\072\001\002\000\072\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\045\ufffa\047\ufffa\001\002\000\072" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\045\ufff6\047\ufff6\001\002\000\072\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\045\ufff8\047\ufff8\001" +
    "\002\000\004\046\107\001\002\000\004\046\106\001\002" +
    "\000\004\046\105\001\002\000\072\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\045\uffdb\047\uffdb\001" +
    "\002\000\072\002\uffd9\004\uffd9\005\uffd9\006\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\045\uffd9\047\uffd9\001\002\000\072\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\045\uffda" +
    "\047\uffda\001\002\000\004\046\115\001\002\000\004\046" +
    "\114\001\002\000\004\046\113\001\002\000\072\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\045\ufff1" +
    "\047\ufff1\001\002\000\072\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\045\ufff3\047\ufff3\001\002\000" +
    "\072\002\ufff2\004\ufff2\005\ufff2\006\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\045\ufff2\047\ufff2\001\002\000\012\022\015\023\012" +
    "\031\025\047\024\001\002\000\012\022\015\023\012\031" +
    "\025\047\024\001\002\000\012\022\015\023\012\031\025" +
    "\047\024\001\002\000\012\022\015\023\012\031\025\047" +
    "\024\001\002\000\012\022\015\023\012\031\025\047\024" +
    "\001\002\000\012\022\015\023\012\031\025\047\024\001" +
    "\002\000\072\002\uffcb\004\uffcb\005\uffcb\006\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\045\uffcb\047\uffcb\001\002\000\072\002\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\045\uffcd" +
    "\047\uffcd\001\002\000\072\002\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\045\uffcf\047\uffcf\001\002\000" +
    "\072\002\uffcc\004\uffcc\005\uffcc\006\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\045\uffcc\047\uffcc\001\002\000\072\002\uffce\004\uffce" +
    "\005\uffce\006\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\045\uffce\047\uffce" +
    "\001\002\000\072\002\uffd0\004\uffd0\005\uffd0\006\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\045\uffd0\047\uffd0\001\002\000\004\046" +
    "\137\001\002\000\004\046\136\001\002\000\004\046\135" +
    "\001\002\000\072\002\uffde\004\uffde\005\uffde\006\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\045\uffde\047\uffde\001\002\000\072\002" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\045" +
    "\uffdc\047\uffdc\001\002\000\072\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\045\uffdd\047\uffdd\001\002" +
    "\000\004\006\142\001\002\000\012\006\077\035\071\036" +
    "\073\037\072\001\002\000\062\002\ufffd\005\ufffd\006\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\045" +
    "\ufffd\047\ufffd\001\002\000\004\046\150\001\002\000\004" +
    "\046\147\001\002\000\004\046\146\001\002\000\072\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\045" +
    "\uffe1\047\uffe1\001\002\000\072\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\045\uffdf\047\uffdf\001\002" +
    "\000\072\002\uffe0\004\uffe0\005\uffe0\006\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\045\uffe0\047\uffe0\001\002\000\004\046\156\001" +
    "\002\000\004\046\155\001\002\000\004\046\154\001\002" +
    "\000\072\002\ufff0\004\ufff0\005\ufff0\006\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\045\ufff0\047\ufff0\001\002\000\072\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\045\uffee\047" +
    "\uffee\001\002\000\072\002\uffef\004\uffef\005\uffef\006\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\045\uffef\047\uffef\001\002\000\072" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\045\ufff9\047\ufff9\001\002\000\004\046\165\001\002\000" +
    "\004\046\164\001\002\000\004\046\163\001\002\000\072" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\045\uffd3\047\uffd3\001\002\000\072\002\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\045\uffd5\047\uffd5\001" +
    "\002\000\072\002\uffd4\004\uffd4\005\uffd4\006\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\045\uffd4\047\uffd4\001\002\000\026\012\173" +
    "\013\174\014\175\015\167\016\201\017\177\020\171\021" +
    "\170\022\172\023\200\001\002\000\004\006\uffc3\001\002" +
    "\000\004\006\uffbf\001\002\000\004\006\uffc0\001\002\000" +
    "\004\006\uffbd\001\002\000\004\006\uffc6\001\002\000\004" +
    "\006\uffc5\001\002\000\004\006\uffc4\001\002\000\004\006" +
    "\202\001\002\000\004\006\uffc2\001\002\000\004\006\uffbe" +
    "\001\002\000\004\006\uffc1\001\002\000\072\002\uffd1\004" +
    "\uffd1\005\uffd1\006\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\045\uffd1\047" +
    "\uffd1\001\002\000\004\046\210\001\002\000\004\046\207" +
    "\001\002\000\004\046\206\001\002\000\072\002\uffe7\004" +
    "\uffe7\005\uffe7\006\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\045\uffe7\047" +
    "\uffe7\001\002\000\072\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\045\uffe5\047\uffe5\001\002\000\072" +
    "\002\uffe6\004\uffe6\005\uffe6\006\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\045\uffe6\047\uffe6\001\002\000\056\005\074\012\027\013" +
    "\016\014\035\015\036\016\006\017\034\020\017\021\021" +
    "\022\015\023\012\024\030\025\032\026\013\027\007\030" +
    "\010\031\025\032\004\033\011\034\014\045\022\047\024" +
    "\001\002\000\012\004\213\035\071\036\073\037\072\001" +
    "\002\000\056\005\074\012\027\013\016\014\035\015\036" +
    "\016\006\017\034\020\017\021\021\022\015\023\012\024" +
    "\030\025\032\026\013\027\007\030\010\031\025\032\004" +
    "\033\011\034\014\045\022\047\024\001\002\000\012\004" +
    "\215\035\071\036\073\037\072\001\002\000\056\005\074" +
    "\012\027\013\016\014\035\015\036\016\006\017\034\020" +
    "\017\021\021\022\015\023\012\024\030\025\032\026\013" +
    "\027\007\030\010\031\025\032\004\033\011\034\014\045" +
    "\022\047\024\001\002\000\012\006\217\035\071\036\073" +
    "\037\072\001\002\000\072\002\uffd2\004\uffd2\005\uffd2\006" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\045\uffd2\047\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\014\002\032\003\022\004\004\005\030\006" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\156" +
    "\006\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\137\005\140\006\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\060\004\004\005\030\006\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\100\006\025\001\001\000\006\005\077\006\025" +
    "\001\001\000\006\005\074\006\025\001\001\000\006\005" +
    "\075\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\130\001" +
    "\001\000\004\006\127\001\001\000\004\006\126\001\001" +
    "\000\004\006\125\001\001\000\004\006\124\001\001\000" +
    "\004\006\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\211\006\025\001\001\000\002\001\001\000\006\005" +
    "\213\006\025\001\001\000\002\001\001\000\006\005\215" +
    "\006\025\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** variable - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** for storing the result of the expression. */
  protected Boolean m_Result = null;

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Returns the string value associated with the symbol.
   *
   * @param symbol the symbol to look up
   * @return the string value, "" if not available
   */
  protected String get(TwitterField symbol) {
  	String		result;

    if (m_Symbols.containsKey(symbol))
      result = (String) m_Symbols.get(symbol);
    else
      result = "";

    return result;
  }

  /**
   * Returns the object value associated with the symbol.
   *
   * @param symbol the symbol to look up
   * @return the string value, null if not available
   */
  protected Object get(String symbol) {
  	Object		result;

    if (m_Symbols.containsKey(symbol))
      result = m_Symbols.get(symbol);
    else
      result = null;

    return result;
  }

  /**
   * Returns the double value associated with the symbol.
   *
   * @return the double value, Double.NaN if not available
   */
  protected Double getDouble(TwitterField symbol) {
  	Double		result;

    if (m_Symbols.containsKey(symbol))
      result = (Double) m_Symbols.get(symbol);
    else
      result = Double.NaN;

    return result;
  }

  /**
   * Returns the boolean value associated with the symbol.
   *
   * @return the boolean value, false if not available
   */
  protected Boolean getBoolean(TwitterField symbol) {
  	Boolean		result;

    if (m_Symbols.containsKey(symbol))
      result = (Boolean) m_Symbols.get(symbol);
    else
      result = false;

    return result;
  }

  /**
   * Returns whether the symbol is present at all.
   *
   * @return true if present
   */
  protected boolean has(TwitterField symbol) {
    return m_Symbols.containsKey(symbol);
  }

  /**
   * Sets the result of the evaluation.
   *
   * @param value the result
   */
  public void setResult(Boolean value) {
    m_Result = value;
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public Boolean getResult() {
    return m_Result;
  }

  /**
   * Returns whether an exact match was found in array.
   *
   * @param search the search term
   * @param values the array of values to search
   * @return true if match
   */
  public boolean isExactMatch(String search, String[] values) {
    boolean result;
    
    result = false;
    
    for (String value: values) {
      if (value.equals(search)) {
        result = true;
        break;
      }
    }
    
    return result;
  }

  /**
   * Returns whether a substring was found in the array.
   *
   * @param search the substring to find
   * @param values the array of values to search
   * @return true if match
   */
  public boolean isSubstringMatch(String search, String[] values) {
    boolean result;
    
    result = false;
    
    for (String value: values) {
      if (value.indexOf(search) > -1) {
        result = true;
        break;
      }
    }
    
    return result;
  }

  /**
   * Returns whether a regexp matched a value of the array.
   *
   * @param search the regexp to match against the values
   * @param values the array of values to search
   * @return true if match
   */
  public boolean isRegExpMatch(String search, String[] values) {
    boolean result;
    
    result = false;
    
    for (String value: values) {
      if (value.matches(search)) {
        result = true;
        break;
      }
    }
    
    return result;
  }

  /**
   * Runs the parser from commandline. Either reads lines from System.in
   * or from a provided file (line by line). With
   * <code>-symbols <semi-colon separated list of variable/value pairs></code>
   * as first parameter one can provide predefined variable values. E.g.:
   * <code>-symbols "Y=10;X=3" "X+Y"</code>
   *
   * @param args the commandline arguments
   * @throws Exception if something goes wrong
   */
  public static void main(String args[]) throws Exception {
    // read symbols, if present
    HashMap symbols = new HashMap();
    if (args.length > 0) {
      if (args[0].equals("-symbols")) {
        // parse symbols
        String[] pairs = args[1].replaceAll(" ", "").split(";");
        for (int i = 0; i < pairs.length; i++) {
          String[] parts = pairs[i].split("=");
          symbols.put(parts[0], new Double(parts[1]));
        }
        // print symbols
        System.out.println("\nSymbols provided:");
        Iterator iter = symbols.keySet().iterator();
        while (iter.hasNext()) {
          String key = (String) iter.next();
          System.out.println(key + "=" + symbols.get(key));
        }
        // remove symbols from commandline
        String[] argsNew = new String[args.length - 2];
        System.arraycopy(args, 2, argsNew, 0, argsNew.length);
        args = argsNew;
      }
    }

    // setup input stream
    int index = -1;
    if (args.length == 1)
      index = 0;
    BufferedReader input = null;
    if (index == -1) {
      System.out.println("\nPlease type in expressions (and press <Enter>), exit with <Ctrl+D>:");
      input = new BufferedReader(new InputStreamReader(System.in));
    }
    else {
      System.out.println("\nReading expressions from file '" + args[index] + "':");
      input = new BufferedReader(new FileReader(args[index]));
    }

    // process stream
    SymbolFactory sf = new DefaultSymbolFactory();
    String line;
    while ((line = input.readLine()) != null) {
      ByteArrayInputStream parserInput = new ByteArrayInputStream(line.getBytes());
      Parser parser = new Parser(new Scanner(parserInput,sf), sf);
      parser.setSymbols(symbols);
      parser.parse();
      System.out.println(line + " = " + parser.getResult());
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.setResult(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= LPAREN expr RPAREN 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= boolexpr 
            {
              Boolean RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // boolexpr ::= BOOLEAN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // boolexpr ::= LPAREN boolexpr RPAREN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // boolexpr ::= NOT boolexpr 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = !b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // boolexpr ::= boolexpr AND boolexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l && r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // boolexpr ::= boolexpr OR boolexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l || r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // boolexpr ::= boolexpr XOR boolexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l != r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // boolexpr ::= RETWEET 
            {
              Boolean RESULT =null;
		 RESULT = parser.getBoolean(TwitterField.RETWEET); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // boolexpr ::= ISRETWEETED 
            {
              Boolean RESULT =null;
		 RESULT = parser.getBoolean(TwitterField.IS_RETWEETED); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolexpr ::= LANGUAGE_CODE SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.LANGUAGE_CODE).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolexpr ::= LANGUAGE_CODE EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.LANGUAGE_CODE).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolexpr ::= LANGUAGE_CODE REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.LANGUAGE_CODE).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolexpr ::= COUNTRY SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.COUNTRY).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolexpr ::= COUNTRY EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.COUNTRY).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolexpr ::= COUNTRY REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.COUNTRY).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolexpr ::= COUNTRY_CODE SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.COUNTRY_CODE).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolexpr ::= COUNTRY_CODE EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.COUNTRY_CODE).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexpr ::= COUNTRY_CODE REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.COUNTRY_CODE).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexpr ::= PLACE SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.PLACE).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexpr ::= PLACE EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.PLACE).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexpr ::= PLACE REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.PLACE).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexpr ::= SOURCE SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.SOURCE).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexpr ::= SOURCE EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.SOURCE).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolexpr ::= SOURCE REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.SOURCE).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolexpr ::= TEXT SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.TEXT).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolexpr ::= TEXT EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.TEXT).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolexpr ::= TEXT REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.TEXT).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolexpr ::= USER SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.USER_NAME).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolexpr ::= USER EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.USER_NAME).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolexpr ::= USER REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.USER_NAME).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolexpr ::= SCREENNAME SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.USER_SCREENNAME).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolexpr ::= SCREENNAME EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.USER_SCREENNAME).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolexpr ::= SCREENNAME REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.USER_SCREENNAME).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolexpr ::= HASHTAG SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.isSubstringMatch(s, (String[]) parser.get(TwitterHelper.SYMBOL_HASHTAGS))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolexpr ::= HASHTAG EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.isExactMatch(s, (String[]) parser.get(TwitterHelper.SYMBOL_HASHTAGS))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolexpr ::= HASHTAG REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.isRegExpMatch(s, (String[]) parser.get(TwitterHelper.SYMBOL_HASHTAGS))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolexpr ::= USERMENTION SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.isSubstringMatch(s, (String[]) parser.get(TwitterHelper.SYMBOL_USERMENTIONS))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolexpr ::= USERMENTION EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.isExactMatch(s, (String[]) parser.get(TwitterHelper.SYMBOL_USERMENTIONS))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boolexpr ::= USERMENTION REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.isRegExpMatch(s, (String[]) parser.get(TwitterHelper.SYMBOL_USERMENTIONS))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolexpr ::= STATUSLANG SUBSTRING_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parser.get(TwitterField.STATUS_LANG).indexOf(s) > -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolexpr ::= STATUSLANG EXACT_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.STATUS_LANG).equals(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolexpr ::= STATUSLANG REGEXP_MATCH STRING 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.get(TwitterField.STATUS_LANG).matches(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolexpr ::= IFELSE LPAREN boolexpr COMMA boolexpr COMMA boolexpr RPAREN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e_trueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e_trueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean e_true = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e_falseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e_falseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean e_false = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (b)
                     RESULT = e_true;
                   else
                     RESULT = e_false;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolexpr ::= HAS LPAREN parameter RPAREN 
            {
              Boolean RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TwitterField p = (TwitterField)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.has(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolexpr ::= numexpr LT numexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) < 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolexpr ::= numexpr LE numexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) <= 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolexpr ::= numexpr GT numexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) > 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // boolexpr ::= numexpr GE numexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) >= 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolexpr ::= numexpr EXACT_MATCH numexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) == 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolexpr ::= numexpr NOT_EQ numexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) != 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // numexpr ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // numexpr ::= LONGITUDE 
            {
              Double RESULT =null;
		 RESULT = parser.getDouble(TwitterField.GEO_LONGITUDE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // numexpr ::= LATITUDE 
            {
              Double RESULT =null;
		 RESULT = parser.getDouble(TwitterField.GEO_LATITUDE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // numexpr ::= FAVCOUNT 
            {
              Double RESULT =null;
		 RESULT = parser.getDouble(TwitterField.FAVORITE_COUNT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameter ::= LANGUAGE_CODE 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.LANGUAGE_CODE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter ::= COUNTRY 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.COUNTRY; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter ::= COUNTRY_CODE 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.COUNTRY_CODE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parameter ::= PLACE 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.PLACE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameter ::= TEXT 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.TEXT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parameter ::= SOURCE 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.SOURCE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameter ::= USER 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.USER_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameter ::= SCREENNAME 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.USER_SCREENNAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parameter ::= LATITUDE 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.GEO_LATITUDE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parameter ::= LONGITUDE 
            {
              TwitterField RESULT =null;
		 RESULT = TwitterField.GEO_LONGITUDE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
