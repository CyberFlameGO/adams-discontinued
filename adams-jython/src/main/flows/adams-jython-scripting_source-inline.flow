# Project: adams
# Date: 2016-02-15 14:34:18
# User: fracpete
# Charset: UTF-8
adams.flow.control.Flow -annotation "Example flow that uses an inline Jython source\\nscript to generate some random integers.\\nNB: If you experience problems executing the flow,\\nsee src/site/apt/Troubleshooting.apt" -flow-execution-listener adams.flow.execution.NullListener
 adams.flow.source.Jython -inline-script "import adams.flow.core.Token as Token\\nimport adams.flow.core.Unknown as Unknown\\nimport adams.flow.source.AbstractScript as AbstractScript\\n\\nimport java.lang.Class as Class\\nimport java.util.Random as Random\\n\\nclass SimpleSource(AbstractScript):\\n    \\\"\\\"\\\"\\n    A simple Jython source that just generates a few random integers as\\n    tokens (0-99).\\n\\n    @author: FracPete (fracpete at waikato dot ac dot nz)\\n    @version: $Revision: 2111 $\\n    \\\"\\\"\\\"\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes the actor.\\n        \\\"\\\"\\\"\\n\\n        AbstractScript.__init__(self)\\n\\n        self._Tokens = None\\n        \\\"\\\"\\\" contains all the tokens to send. \\\"\\\"\\\"\\n\\n    def globalInfo(self):\\n        \\\"\\\"\\\"\\n        Returns a string describing the object.\\n\\n        @return: a description suitable for displaying in the gui\\n        @rtype: str\\n        \\\"\\\"\\\"\\n\\n        return \\\"Just generates a bunch of random integer tokens (0-99).\\\"\\n\\n    def setUp(self):\\n        \\\"\\\"\\\"\\n        Initializes the item for flow execution.\\n\\n        @return: None if everything is fine, otherwise error message\\n        @rtype: str\\n        \\\"\\\"\\\"\\n\\n        result = AbstractScript.setUp(self)\\n        if (result == None):\\n            self._Tokens = []\\n        return result\\n\\n    def generates(self):\\n        \\\"\\\"\\\"\\n        Returns the class of objects that it generates.\\n\\n        @return: Integer.class\\n        @rtype: list\\n        \\\"\\\"\\\"\\n\\n        # very in-elegant, but works\\n        # http://www.prasannatech.net/2009/02/class-object-name-java-interface-jython.html\\n        return [Class.forName(\\\"java.lang.Integer\\\")]\\n\\n    def doExecute(self):\\n        \\\"\\\"\\\"\\n        Executes the flow item.\\n\\n        @return: None if everything is fine, otherwise error message\\n        @rtype: str\\n        \\\"\\\"\\\"\\n\\n        rand = Random(1)\\n        for i in xrange(10):\\n            self._Tokens.append(Token(rand.nextInt(100)))\\n        return None\\n\\n    def output(self):\\n        \\\"\\\"\\\"\\n        Returns the generated token.\\n\\n        @return: the generated token\\n        @rtype: Token\\n        \\\"\\\"\\\"\\n\\n        result = self._Tokens[0]\\n        del self._Tokens[0]\\n        return result\\n\\n    def hasPendingOutput(self):\\n        \\\"\\\"\\\"\\n        Checks whether there is pending output to be collected after\\n        executing the flow item.\\n\\n        @return: true if there is pending output\\n        @rtype: bool\\n        \\\"\\\"\\\"\\n\\n        return (len(self._Tokens) > 0)\\n\\n    def wrapUp(self):\\n        \\\"\\\"\\\"\\n        Cleans up after the execution has finished.\\n        \\\"\\\"\\\"\\n\\n        AbstractScript.wrapUp(self)\\n        self._Tokens = None\\n"
 adams.flow.sink.Display -writer adams.data.io.output.NullWriter
